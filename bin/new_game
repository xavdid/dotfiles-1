#!/usr/bin/env node

const requireGlobal = m => {
  const HOME = require("os").homedir();
  const { join } = require("path");
  // `yarn global dir` returns /Users/david/.config/yarn/global

  try {
    return require(join(HOME, ".config/yarn/global/node_modules/", m));
  } catch (e) {
    console.error(
      `unable to find "${m}", install it globally:\n\n\tyarn global add ${m}\n`
    );
    process.exit(1);
  }
};

const got = requireGlobal("got");
const config = requireGlobal("@brownman/config");
const inquirer = requireGlobal("inquirer");

/////////////////////////////////////////////////////

const searchGames = async () => {
  const { name } = await inquirer.prompt([
    { message: "What game is it?", name: "name" }
  ]);
  const res = await got(`https://api-v3.igdb.com/games`, {
    headers: { "user-key": config.readToken("igdb") },
    method: "POST",
    body: `search "${name}"; fields name, slug, first_release_date, platforms;`
    // body: `fields name, slug, first_release_date, platforms; where slug = "for-the-king";`
  });
  const games = JSON.parse(res.body);
  if (!games.length) {
    console.log("no games found, try again\n");
  }
  return games;
};

const isWindowsOnly = game => !(game.platforms || []).includes(14);

const releaseYear = maybeDate =>
  maybeDate ? new Date(maybeDate * 1000).toISOString().substr(0, 4) : "Unknown";

const formatGameForPrint = game =>
  `${game.name} (${releaseYear(game.first_release_date)})`;

// don't need steam, that's handled automatically
const platforms = {
  epic: { value: "Epic", group: "pc" },
  twitch: { value: "Twitch", group: "pc" },
  gamePass: { value: "Game Pass", group: "pc" },
  ps4: { value: "PS4", group: "console" },
  switch: { value: "Switch", group: "console" },
  ios: { value: "iOS", group: "mobile" },
  "itch.io": { value: "itch.io", group: "pc" },
  humble: { value: "Humble", group: "pc" },
  gog: { value: "GOG", group: "pc" },
  uplay: { value: "UPlay", group: "pc" }
};
const groupedPlatforms = Object.values(platforms).reduce(
  (res, { value, group }) => ({
    ...res,
    [group]: [...(res[group] || []), value]
  }),
  {}
);

const main = async () => {
  let games = [];

  while (!games.length) {
    games = await searchGames();
  }

  let game;
  if (games.length === 1) {
    game = games[0];
    console.log(`\nFound: ${formatGameForPrint(game)}\n`);
  } else {
    let { slug } = await inquirer.prompt([
      {
        type: "list",
        message: "Which one, specifically?",
        name: "slug",
        choices: games.map(game => ({
          name: formatGameForPrint(game),
          value: game.slug
        }))
      }
    ]);
    game = games.find(x => x.slug === slug);
  }

  const windowsOnly = isWindowsOnly(game);

  const info = await inquirer.prompt([
    {
      type: "list",
      message: "What platform?",
      name: "platform",
      choices: Object.values(platforms).map(x => x.value)
    },
    {
      type: "confirm",
      message: "Is this part of PS+?",
      name: "plus",
      when: answers => answers.platform === platforms.ps4.value
    },
    {
      type: "confirm",
      message: `Is this Windows only? IGDB says ${windowsOnly ? "Y" : "N"}`,
      name: "windows",
      default: windowsOnly,
      when: answers =>
        groupedPlatforms.pc.includes(answers.platform) &&
        answers.platform !== platforms.twitch.value &&
        answers.platform !== platforms.gamePass.value
    },
    {
      type: "confirm",
      message: "Is this a physical copy?",
      name: "physical",
      default: false,
      when: answers =>
        !answers.plus && groupedPlatforms.console.includes(answers.platform)
    },
    {
      type: "number",
      message: "How much did it cost?",
      name: "cost",
      default: 0,
      when: answers =>
        !answers.plus &&
        answers.platform !== platforms.twitch.value &&
        answers.platform !== platforms.gamePass.value
    },
    {
      type: "list",
      message: "What is your interest level?",
      name: "interest_level",
      choices: ["4", "3", "2", "1", "N/A"],
      filter: i => (i === "N/A" ? undefined : parseInt(i, 10))
    }
  ]);

  const body = { ...info, slug: game.slug };
  // console.log("would have sent", body);
  await got(config.readZapUrl("game"), { json: true, body });
  console.log("Success! Added", game.name);
};

main().catch(e => console.error("there was a problem:", e));
