#!/usr/bin/env node
const HOME = require("os").homedir();
const requireGlobal = (m) => {
  const { join } = require("path");
  // `yarn global dir` returns /Users/david/.config/yarn/global

  try {
    return require(join(HOME, "/.config/yarn/global/node_modules/", m));
  } catch (e) {
    console.error(
      `unable to find "${m}", install it globally:\n\n\tyarn global add ${m}\n`
    );
    process.exit(1);
  }
};

/////////////////////////////////////////////////////////////////

const { countWords } = requireGlobal("epub-wordcount");
const got = requireGlobal("got");
const config = requireGlobal("@brownman/config");
const { program } = requireGlobal("commander");
const inquirer = requireGlobal("inquirer");
const { extname, basename, parse, resolve, join } = require("path");
const fs = require("fs");
const { spawnSync } = require("child_process");

const url = config.readZapUrl("book");

const EBOOKS_DIR = `${HOME}/Downloads/ebooks`;
const RETRY_KEY = "__retry__";

const sendData = async (data) => {
  try {
    await got.post(url, { json: data });
  } catch (e) {
    console.log(e);
    process.exitCode = 1;
  }
};

const fetchGBooksInfo = async (fileName) => {
  let data;
  if (fileName) {
    data = await got(
      `https://www.googleapis.com/books/v1/volumes?q=${encodeURIComponent(
        fileName
      )}`
    ).json();
  } else {
    const { title } = await inquirer.prompt([
      {
        type: "input",
        name: "title",
        message: "What's the book's title?",
      },
    ]);
    data = await got(
      `https://www.googleapis.com/books/v1/volumes?q=${encodeURIComponent(
        title
      )}`
    ).json();
  }

  const choices = [
    ...data.items
      .sort(
        (
          { saleInfo: { saleability: aSale } },
          { saleInfo: { saleability: bSale } }
        ) => {
          // either "FOR_SALE" or "NOT_FOR_SALE"
          if (aSale === bSale) {
            return 0;
          }
          return bSale === "FOR_SALE" ? 1 : -1;
        }
      )
      .slice(0, 5)
      .map(({ id, volumeInfo: { title, authors, publishedDate } }) => ({
        value: id,
        name: `${title} by ${authors.join(", ")} (${
          (publishedDate || "").split("-")[0]
        })`,
      })),
    { name: "Enter Title/ID Manually", value: RETRY_KEY },
  ];
  const { gbid } = await inquirer.prompt([
    {
      name: "gbid",
      type: "list",
      message: "Which book is it?",
      choices,
    },
  ]);

  if (gbid === RETRY_KEY) {
    // don't pass the filename when recursing
    return fetchGBooksInfo();
  }
  return gbid;
};

const processEpub = async (bookPath, { shouldMove } = {}) => {
  const searchInfo = parse(bookPath).name;

  let gbid;
  while (!gbid) {
    gbid = await fetchGBooksInfo(searchInfo);
  }

  const word_count = await countWords(bookPath, true);

  let { seriesNumber, isTor } = await inquirer.prompt([
    {
      type: "confirm",
      name: "isTor",
      message: "Is this a TOR free download?",
      default: false,
    },
    {
      type: "number",
      name: "seriesNumber",
      message:
        "What number in the series is it? Put `-1` if it's not part of a series.",
      default: -1,
    },
  ]);

  if (seriesNumber < 1) {
    seriesNumber = undefined;
  }

  await sendData({ gbid, isTor, seriesNumber, word_count });

  if (shouldMove) {
    if (bookPath.includes("Dropbox/Apps/Calibre")) {
      console.log("skipping move because it's already in calibre");
    } else {
      fs.renameSync(bookPath, `${EBOOKS_DIR}/${parse(bookPath).base}`);
      console.log(`moved file to ${EBOOKS_DIR}`);
    }
  } else {
    console.log(`skipping move`);
  }
};

const processOdm = async (odmPath) => {
  const { status, stdout, stderr } = spawnSync(
    "odmpy",
    ["info", odmPath, "-f", "json"],
    {
      encoding: "utf-8",
    }
  );
  if (status) {
    console.error("err from odmpy:");
    throw new Error(stderr);
  }
  const audiobookInfo = JSON.parse(stdout);

  const num_minutes = audiobookInfo.total_duration.total_minutes;
  const searchInfo = `${audiobookInfo.title} ${audiobookInfo.creators[0]}`; // might need author too, might not

  let gbid;
  while (!gbid) {
    gbid = await fetchGBooksInfo(searchInfo);
  }

  let { seriesNumber, isTor } = await inquirer.prompt([
    {
      type: "confirm",
      name: "isTor",
      message: "Is this a TOR free download?",
      default: false,
    },
    {
      type: "number",
      name: "seriesNumber",
      message:
        "What number in the series is it? Put `-1` if it's not part of a series.",
      default: -1,
    },
  ]);

  if (seriesNumber < 1) {
    seriesNumber = undefined;
  }
  // await sendData({ gbid, isTor, seriesNumber, num_minutes });
  console.log(`Done! run:\n\taudiobook ${odmPath}\n`);
};

/////////////////////////////////////////////////////////////////

program
  .arguments("<PATH>")
  .option(
    "-m, --move",
    "Move the file to the `~/Downloads/ebooks` folder if the operation is successful"
  );

program.parse(process.argv);

const errorOut = () => {
  console.error(
    "ERR: Supply exactly one path: either an epub/odm file or a directory with exactly 1 of those\n"
  );
  console.log(program.help());
  process.exit(1);
};

if (program.args.length !== 1) {
  errorOut();
}

// turn `.` into an actual path
let inputPath = resolve(program.args[0]);

if (fs.lstatSync(inputPath).isDirectory()) {
  const files = fs.readdirSync(inputPath);
  const matchingFiles = files.filter((file) =>
    [".epub", ".odm"].includes(extname(file))
  );

  if (matchingFiles.length !== 1) {
    errorOut();
  }

  inputPath = join(inputPath, matchingFiles[0]);
} else if (![".epub", ".odm"].includes(extname(inputPath))) {
  errorOut();
}

(extname(inputPath) === ".epub"
  ? processEpub(inputPath, { shouldMove: program.move })
  : processOdm(inputPath)
).catch((e) => {
  console.error(e);
  process.exit(1);
});
